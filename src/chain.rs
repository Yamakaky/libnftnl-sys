// automatically generated by rust-bindgen

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

use std::os::raw::*;

use libc;
use libmnl_sys::nlmsghdr;

use common::*;

pub enum chain { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum chain_attr {
    NAME = 0,
    FAMILY = 1,
    TABLE = 2,
    HOOKNUM = 3,
    PRIO = 4,
    POLICY = 5,
    USE = 6,
    BYTES = 7,
    PACKETS = 8,
    HANDLE = 9,
    TYPE = 10,
    DEV = 11,
    __NFTNL_CHAIN_MAX = 12,
}

#[derive(Debug)]
#[repr(C)]
pub enum NFPROTO {
    UNSPEC =  0,
    INET   =  1,
    IPV4   =  2,
    ARP    =  3,
    NETDEV =  5,
    BRIDGE =  7,
    IPV6   = 10,
}
pub enum chain_list { }
pub enum chain_list_iter { }

pub type foreach_callback = ::std::option::Option<unsafe extern "C" fn(t: *mut chain,
                                                                         data: *mut c_void)
                                                                         -> c_int>;

#[link(name = "nftnl")]
extern "C" {
    #[link_name = "nftnl_chain_alloc"]
    pub fn alloc() -> *mut chain;
    #[link_name = "nftnl_chain_free"]
    pub fn free(arg1: *const chain);
    #[link_name = "nftnl_chain_is_set"]
    pub fn is_set(c: *const chain, attr: u16) -> u8;
    #[link_name = "nftnl_chain_unset"]
    pub fn unset(c: *mut chain, attr: u16);
    #[link_name = "nftnl_chain_set"]
    pub fn set(t: *mut chain, attr: u16, data: *const c_void);
    #[link_name = "nftnl_chain_set_data"]
    pub fn set_data(t: *mut chain, attr: u16, data: *const c_void, data_len: u32);
    #[link_name = "nftnl_chain_set_u8"]
    pub fn set_u8(t: *mut chain, attr: u16, data: u8);
    #[link_name = "nftnl_chain_set_u32"]
    pub fn set_u32(t: *mut chain, attr: u16, data: u32);
    #[link_name = "nftnl_chain_set_s32"]
    pub fn set_s32(t: *mut chain, attr: u16, data: i32);
    #[link_name = "nftnl_chain_set_u64"]
    pub fn set_u64(t: *mut chain, attr: u16, data: u64);
    #[link_name = "nftnl_chain_set_str"]
    pub fn set_str(t: *mut chain, attr: u16, str: *const c_char);
    #[link_name = "nftnl_chain_get"]
    pub fn get(c: *const chain, attr: u16) -> *const c_void;
    #[link_name = "nftnl_chain_get_data"]
    pub fn get_data(c: *const chain, attr: u16, data_len: *mut u32) -> *const c_void;
    #[link_name = "nftnl_chain_get_str"]
    pub fn get_str(c: *const chain, attr: u16) -> *const c_char;
    #[link_name = "nftnl_chain_get_u8"]
    pub fn get_u8(c: *const chain, attr: u16) -> u8;
    #[link_name = "nftnl_chain_get_u32"]
    pub fn get_u32(c: *const chain, attr: u16) -> u32;
    #[link_name = "nftnl_chain_get_s32"]
    pub fn get_s32(c: *const chain, attr: u16) -> i32;
    #[link_name = "nftnl_chain_get_u64"]
    pub fn get_u64(c: *const chain, attr: u16) -> u64;
    #[link_name = "nftnl_chain_nlmsg_build_payload"]
    pub fn nlmsg_build_payload(nlh: *mut nlmsghdr, t: *const chain);
    #[link_name = "nftnl_chain_parse"]
    pub fn parse(c: *mut chain,
                       type_: parse_type,
                       data: *const c_char,
                       err: *mut parse_err)
                       -> c_int;
    #[link_name = "nftnl_chain_parse_file"]
    pub fn parse_file(c: *mut chain,
                            type_: parse_type,
                            fp: *mut libc::FILE,
                            err: *mut parse_err)
                            -> c_int;
    #[link_name = "nftnl_chain_snprintf"]
    pub fn snprintf(buf: *mut c_char,
                          size: usize,
                          t: *const chain,
                          type_: u32,
                          flags: u32)
                          -> c_int;
    #[link_name = "nftnl_chain_fprintf"]
    pub fn fprintf(fp: *mut libc::FILE, c: *const chain, type_: u32, flags: u32) -> c_int;
    #[link_name = "nftnl_chain_nlmsg_parse"]
    pub fn nlmsg_parse(nlh: *const nlmsghdr, t: *mut chain) -> c_int;
    #[link_name = "nftnl_chain_list_alloc"]
    pub fn list_alloc() -> *mut chain_list;
    #[link_name = "nftnl_chain_list_free"]
    pub fn list_free(list: *mut chain_list);
    #[link_name = "nftnl_chain_list_is_empty"]
    pub fn list_is_empty(list: *const chain_list) -> c_int;
    #[link_name = "nftnl_chain_list_foreach"]
    pub fn list_foreach(chain_list: *mut chain_list,
                              cb: foreach_callback,
                              data: *mut c_void)
                              -> c_int;
    #[link_name = "nftnl_chain_list_add"]
    pub fn list_add(r: *mut chain, list: *mut chain_list);
    #[link_name = "nftnl_chain_list_add_tail"]
    pub fn list_add_tail(r: *mut chain, list: *mut chain_list);
    #[link_name = "nftnl_chain_list_del"]
    pub fn list_del(c: *mut chain);
    #[link_name = "nftnl_chain_list_iter_create"]
    pub fn list_iter_create(l: *mut chain_list) -> *mut chain_list_iter;
    #[link_name = "nftnl_chain_list_iter_next"]
    pub fn list_iter_next(iter: *mut chain_list_iter) -> *mut chain;
    #[link_name = "nftnl_chain_list_iter_destroy"]
    pub fn list_iter_destroy(iter: *mut chain_list_iter);
}
