// automatically generated by rust-bindgen

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

use std::os::raw::*;

use libc;
use libmnl_sys::nlmsghdr;

use common::*;
use expr;

pub enum rule { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum attr {
    FAMILY = 0,
    TABLE = 1,
    CHAIN = 2,
    HANDLE = 3,
    COMPAT_PROTO = 4,
    COMPAT_FLAGS = 5,
    POSITION = 6,
    USERDATA = 7,
    __MAX = 8,
}
pub enum expr_iter { }
pub enum list { }
pub enum list_iter { }
pub type cb_t = Option<unsafe extern "C" fn(t: *mut rule, data: *mut c_void) -> c_int>;
pub type foreach_cb = Option<unsafe extern "C" fn(e: *mut expr::expr, data: *mut c_void) -> c_int>;
extern "C" {
    #[link_name = "nftnl_rule_alloc"]
    pub fn alloc() -> *mut rule;
    #[link_name = "nftnl_rule_free"]
    pub fn free(arg1: *const rule);
    #[link_name = "nftnl_rule_unset"]
    pub fn unset(r: *mut rule, attr: u16);
    #[link_name = "nftnl_rule_is_set"]
    pub fn is_set(r: *const rule, attr: u16) -> u8;
    #[link_name = "nftnl_rule_set"]
    pub fn set(r: *mut rule, attr: u16, data: *const c_void);
    #[link_name = "nftnl_rule_set_data"]
    pub fn set_data(r: *mut rule, attr: u16, data: *const c_void, data_len: u32);
    #[link_name = "nftnl_rule_set_u32"]
    pub fn set_u32(r: *mut rule, attr: u16, val: u32);
    #[link_name = "nftnl_rule_set_u64"]
    pub fn set_u64(r: *mut rule, attr: u16, val: u64);
    #[link_name = "nftnl_rule_set_str"]
    pub fn set_str(r: *mut rule, attr: u16, str: *const c_char);
    #[link_name = "nftnl_rule_get"]
    pub fn get(r: *const rule, attr: u16) -> *const c_void;
    #[link_name = "nftnl_rule_get_data"]
    pub fn get_data(r: *const rule, attr: u16, data_len: *mut u32) -> *const c_void;
    #[link_name = "nftnl_rule_get_str"]
    pub fn get_str(r: *const rule, attr: u16) -> *const c_char;
    #[link_name = "nftnl_rule_get_u8"]
    pub fn get_u8(r: *const rule, attr: u16) -> u8;
    #[link_name = "nftnl_rule_get_u32"]
    pub fn get_u32(r: *const rule, attr: u16) -> u32;
    #[link_name = "nftnl_rule_get_u64"]
    pub fn get_u64(r: *const rule, attr: u16) -> u64;
    #[link_name = "nftnl_rule_add_expr"]
    pub fn add_expr(r: *mut rule, expr: *mut expr::expr);
    #[link_name = "nftnl_rule_nlmsg_build_payload"]
    pub fn nlmsg_build_payload(nlh: *mut nlmsghdr, t: *mut rule);
    #[link_name = "nftnl_rule_parse"]
    pub fn parse(r: *mut rule,
                 type_: parse_type,
                 data: *const c_char,
                 err: *mut parse_err)
                 -> c_int;
    #[link_name = "nftnl_rule_parse_file"]
    pub fn parse_file(r: *mut rule,
                      type_: parse_type,
                      fp: *mut libc::FILE,
                      err: *mut parse_err)
                      -> c_int;
    #[link_name = "nftnl_rule_snprintf"]
    pub fn snprintf(buf: *mut c_char,
                    size: usize,
                    t: *const rule,
                    type_: u32,
                    flags: u32)
                    -> c_int;
    #[link_name = "nftnl_rule_fprintf"]
    pub fn fprintf(fp: *mut libc::FILE, r: *const rule, type_: u32, flags: u32) -> c_int;
    #[link_name = "nftnl_rule_nlmsg_parse"]
    pub fn nlmsg_parse(nlh: *const nlmsghdr, t: *mut rule) -> c_int;
    #[link_name = "nftnl_expr_foreach"]
    pub fn expr_foreach(r: *mut rule, cb: foreach_cb, data: *mut c_void) -> c_int;
    #[link_name = "nftnl_expr_iter_create"]
    pub fn expr_iter_create(r: *mut rule) -> *mut expr_iter;
    #[link_name = "nftnl_expr_iter_next"]
    pub fn expr_iter_next(iter: *mut expr_iter) -> *mut expr::expr;
    #[link_name = "nftnl_expr_iter_destroy"]
    pub fn expr_iter_destroy(iter: *mut expr_iter);
    #[link_name = "nftnl_rule_list_alloc"]
    pub fn list_alloc() -> *mut list;
    #[link_name = "nftnl_rule_list_free"]
    pub fn list_free(list: *mut list);
    #[link_name = "nftnl_rule_list_is_empty"]
    pub fn list_is_empty(list: *const list) -> c_int;
    #[link_name = "nftnl_rule_list_add"]
    pub fn list_add(r: *mut rule, list: *mut list);
    #[link_name = "nftnl_rule_list_add_tail"]
    pub fn list_add_tail(r: *mut rule, list: *mut list);
    #[link_name = "nftnl_rule_list_del"]
    pub fn list_del(r: *mut rule);
    #[link_name = "nftnl_rule_list_foreach"]
    pub fn list_foreach(rule_list: *mut list, cb: cb_t, data: *mut c_void) -> c_int;
    #[link_name = "nftnl_rule_list_iter_create"]
    pub fn list_iter_create(l: *mut list) -> *mut list_iter;
    #[link_name = "nftnl_rule_list_iter_cur"]
    pub fn list_iter_cur(iter: *mut list_iter) -> *mut rule;
    #[link_name = "nftnl_rule_list_iter_next"]
    pub fn list_iter_next(iter: *mut list_iter) -> *mut rule;
    #[link_name = "nftnl_rule_list_iter_destroy"]
    pub fn list_iter_destroy(iter: *const list_iter);
}
