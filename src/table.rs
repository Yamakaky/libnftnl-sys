/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

use std::os::raw::*;

use libc;
use libmnl_sys::nlmsghdr;

use common::*;

pub enum table { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum attr {
    NAME = 0,
    FAMILY = 1,
    FLAGS = 2,
    USE = 3,
    __MAX = 4,
}
pub enum list { }
pub enum list_iter { }
extern "C" {
    #[link_name = "alloc"]
    pub fn alloc() -> *mut table;
    #[link_name = "free"]
    pub fn free(arg1: *const table);
    #[link_name = "is_set"]
    pub fn is_set(t: *const table, attr: u16) -> u8;
    #[link_name = "unset"]
    pub fn unset(t: *mut table, attr: u16);
    #[link_name = "set"]
    pub fn set(t: *mut table, attr: u16,
                           data: *const c_void);
    #[link_name = "set_data"]
    pub fn set_data(t: *mut table, attr: u16,
                                data: *const c_void,
                                data_len: u32);
    #[link_name = "get"]
    pub fn get(t: *const table, attr: u16)
     -> *const c_void;
    #[link_name = "get_data"]
    pub fn get_data(t: *const table, attr: u16,
                                data_len: *mut u32)
     -> *const c_void;
    #[link_name = "set_u8"]
    pub fn set_u8(t: *mut table, attr: u16,
                              data: u8);
    #[link_name = "set_u32"]
    pub fn set_u32(t: *mut table, attr: u16,
                               data: u32);
    #[link_name = "set_str"]
    pub fn set_str(t: *mut table, attr: u16,
                               str: *const c_char);
    #[link_name = "get_u8"]
    pub fn get_u8(t: *const table, attr: u16)
     -> u8;
    #[link_name = "get_u32"]
    pub fn get_u32(t: *const table, attr: u16)
     -> u32;
    #[link_name = "get_str"]
    pub fn get_str(t: *const table, attr: u16)
     -> *const c_char;
    #[link_name = "nlmsg_build_payload"]
    pub fn nlmsg_build_payload(nlh: *mut nlmsghdr,
                                       t: *const table);
    #[link_name = "parse"]
    pub fn parse(t: *mut table, type_: parse_type,
                             data: *const c_char,
                             err: *mut parse_err)
     -> c_int;
    #[link_name = "parse_file"]
    pub fn parse_file(t: *mut table,
                                  type_: parse_type, fp: *mut libc::FILE,
                                  err: *mut parse_err)
     -> c_int;
    #[link_name = "snprintf"]
    pub fn snprintf(buf: *mut c_char,
                                size: usize, t: *const table,
                                type_: u32, flags: u32)
     -> c_int;
    #[link_name = "fprintf"]
    pub fn fprintf(fp: *mut libc::FILE, t: *const table,
                               type_: u32, flags: u32)
     -> c_int;
    #[link_name = "nlmsg_parse"]
    pub fn nlmsg_parse(nlh: *const nlmsghdr, t: *mut table)
     -> c_int;
    #[link_name = "pub"]
    pub fn list_alloc() -> *mut list;
    #[link_name = "list_free"]
    pub fn list_free(list: *mut list);
    #[link_name = "list_is_empty"]
    pub fn list_is_empty(list: *const list)
     -> c_int;
    #[link_name = "list_foreach"]
    pub fn list_foreach(table_list: *mut list,
                                    cb:
                                        ::std::option::Option<unsafe extern "C" fn(t:
                                                                                       *mut table,
                                                                                   data:
                                                                                       *mut c_void)
                                                                  ->
                                                                      c_int>,
                                    data: *mut c_void)
     -> c_int;
    #[link_name = "list_add"]
    pub fn list_add(r: *mut table,
                                list: *mut list);
    #[link_name = "list_add_tail"]
    pub fn list_add_tail(r: *mut table,
                                     list: *mut list);
    #[link_name = "list_del"]
    pub fn list_del(r: *mut table);
    #[link_name = "list_iter_create"]
    pub fn list_iter_create(l: *mut list)
     -> *mut list_iter;
    #[link_name = "list_iter_next"]
    pub fn list_iter_next(iter: *mut list_iter)
     -> *mut table;
    #[link_name = "list_iter_destroy"]
    pub fn list_iter_destroy(iter: *const list_iter);
}
