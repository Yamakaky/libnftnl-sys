// automatically generated by rust-bindgen

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]

use std::os::raw::*;

pub enum expr { }
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed3 {
    expr_NAME = 0,
    expr_BASE = 1,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Payload {
    DREG = 1,
    BASE = 2,
    OFFSET = 3,
    LEN = 4,
    SREG = 5,
    CSUM_TYPE = 6,
    CSUM_OFFSET = 7,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Meta {
    KEY = 1,
    DREG = 2,
    SREG = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Cmp {
    SREG = 1,
    OP = 2,
    DATA = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum IMM {
    DREG = 1,
    DATA = 2,
    VERDICT = 3,
    CHAIN = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Counter {
    PACKETS = 1,
    BYTES = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Bitwise {
    SREG = 1,
    DREG = 2,
    LEN = 3,
    MASK = 4,
    XOR = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum TG {
    NAME = 1,
    REV = 2,
    INFO = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum MT {
    NAME = 1,
    REV = 2,
    INFO = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Nat {
    TYPE = 1,
    FAMILY = 2,
    REG_ADDR_MIN = 3,
    REG_ADDR_MAX = 4,
    REG_PROTO_MIN = 5,
    REG_PROTO_MAX = 6,
    FLAGS = 7,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Lookup {
    SREG = 1,
    DREG = 2,
    SET = 3,
    SET_ID = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Dynset {
    SREG_KEY = 1,
    SREG_DATA = 2,
    OP = 3,
    TIMEOUT = 4,
    SET_NAME = 5,
    SET_ID = 6,
    EXPR = 7,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Log {
    PREFIX = 1,
    GROUP = 2,
    SNAPLEN = 3,
    QTHRESHOLD = 4,
    LEVEL = 5,
    FLAGS = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ExtHdr {
    DREG = 1,
    TYPE = 2,
    OFFSET = 3,
    LEN = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum CT {
    DREG = 1,
    KEY = 2,
    DIR = 3,
    SREG = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Byteorder {
    DREG = 1,
    SREG = 2,
    OP = 3,
    LEN = 4,
    SIZE = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Limit {
    RATE = 1,
    UNIT = 2,
    BURST = 3,
    TYPE = 4,
    FLAGS = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Reject {
    TYPE = 1,
    CODE = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Queue {
    NUM = 1,
    TOTAL = 2,
    FLAGS = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Masq {
    FLAGS = 1,
    REG_PROTO_MIN = 2,
    REG_PROTO_MAX = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Redir {
    REG_PROTO_MIN = 1,
    REG_PROTO_MAX = 2,
    FLAGS = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Dup {
    SREG_ADDR = 1,
    SREG_DEV = 2,
}
extern "C" {
    #[link_name = "nftnl_expr_alloc"]
    pub fn alloc(name: *const c_char) -> *mut expr;
    #[link_name = "nftnl_expr_free"]
    pub fn free(expr: *const expr);
    #[link_name = "nftnl_expr_is_set"]
    pub fn is_set(expr: *const expr, type_: u16) -> u8;
    #[link_name = "nftnl_expr_set"]
    pub fn set(expr: *mut expr, type_: u16, data: *const c_void, data_len: u32);
    #[link_name = "nftnl_expr_set_u8"]
    pub fn set_u8(expr: *mut expr, type_: u16, data: u8);
    #[link_name = "nftnl_expr_pub"]
    pub fn set_u16(expr: *mut expr, type_: u16, data: u16);
    #[link_name = "nftnl_expr_set_u32"]
    pub fn set_u32(expr: *mut expr, type_: u16, data: u32);
    #[link_name = "nftnl_expr_set_u64"]
    pub fn set_u64(expr: *mut expr, type_: u16, data: u64);
    #[link_name = "nftnl_expr_set_str"]
    pub fn set_str(expr: *mut expr, type_: u16, str: *const c_char);
    #[link_name = "nftnl_expr_get"]
    pub fn get(expr: *const expr, type_: u16, data_len: *mut u32) -> *const c_void;
    #[link_name = "nftnl_expr_get_u8"]
    pub fn get_u8(expr: *const expr, type_: u16) -> u8;
    #[link_name = "nftnl_expr_get_u16"]
    pub fn get_u16(expr: *const expr, type_: u16) -> u16;
    #[link_name = "nftnl_expr_get_u32"]
    pub fn get_u32(expr: *const expr, type_: u16) -> u32;
    #[link_name = "nftnl_expr_get_u64"]
    pub fn get_u64(expr: *const expr, type_: u16) -> u64;
    #[link_name = "nftnl_expr_get_str"]
    pub fn get_str(expr: *const expr, type_: u16) -> *const c_char;
    #[link_name = "nftnl_expr_snprintf"]
    pub fn snprintf(buf: *mut c_char,
                    buflen: usize,
                    expr: *const expr,
                    type_: u32,
                    flags: u32)
                    -> c_int;
}
